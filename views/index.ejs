<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.10.2/cdn.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/default.min.css">
</head>

<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen font-sans" x-data="assessmentApp()"
    x-init="hljs.highlightAll()">
    <div class="container mx-auto px-4 py-8 flex items-center justify-center min-h-screen">
        <!-- Initial Question Input Form -->
        <div x-show="!showQuestions" class="w-full max-w-md">
            <h1 class="text-5xl font-extrabold mb-8 text-center text-indigo-600 drop-shadow-md">
                Algo<span class="text-blue-500">Guide</span>
            </h1>
            <div
                class="bg-white rounded-2xl shadow-lg overflow-hidden transform transition-all hover:scale-105 duration-300">
                <div class="p-8">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-6">Start Your Coding Journey</h2>
                    <form @submit.prevent="startAssessment" class="space-y-6">
                        <div class="relative">
                            <label for="question" class="block text-sm font-medium text-gray-700 mb-2">Enter LeetCode
                                Question:</label>
                            <input type="text" id="question" x-model="question" required
                                class="block w-full px-4 py-3 rounded-md bg-gray-50 border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 ease-in-out"
                                placeholder="e.g., Two Sum, Binary Tree Inorder Traversal">
                            <i class="fas fa-search absolute right-3 top-10 text-gray-400"></i>
                        </div>
                        <!-- Language Selection Dropdown -->
                        <div class="relative">
                            <label for="language" class="block text-sm font-medium text-gray-700 mb-2">Select Preferred
                                Language:</label>
                            <select id="language" x-model="selectedLanguage" required
                                class="block w-full px-4 py-3 rounded-md bg-gray-50 border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 ease-in-out">
                                <option value="" disabled>Select a language</option>
                                <option value="python">Python</option>
                                <option value="java">Java</option>
                                <option value="cpp">C++</option>
                                <option value="javascript">JavaScript</option>
                            </select>
                        </div>
                        <div class="mt-6">
                            <button type="submit"
                                class="w-full flex items-center justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-300 ease-in-out transform hover:-translate-y-1">
                                <span>Start Session</span>
                                <i class="fas fa-arrow-right ml-2"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <p class="mt-8 text-center text-gray-600">Ready to enhance your problem-solving skills? Let's dive in!</p>
        </div>

        <!-- Assessment Questions -->
        <div x-show="showQuestions" class="w-full max-w-2xl">
            <template x-if="currentQuestionIndex < assessmentQuestions.length">
                <div class="bg-white p-6 rounded-lg shadow-md mb-6">
                    <!-- Concept Question -->
                    <div x-show="showConceptQuestion">
                        <h3 class="text-xl font-semibold mb-4"
                            x-text="assessmentQuestions[currentQuestionIndex].conceptQuestion"></h3>
                        <div class="space-y-3">
                            <button @click="handleConceptAnswer(true)"
                                class="w-full text-left px-4 py-2 border border-gray-300 rounded-md hover:bg-indigo-100 transition duration-200">Yes</button>
                            <button @click="handleConceptAnswer(false)"
                                class="w-full text-left px-4 py-2 border border-gray-300 rounded-md hover:bg-indigo-100 transition duration-200">No</button>
                        </div>
                    </div>

                    <!-- Multiple Choice Question -->
                    <div x-show="showMultipleChoice">
                        <h3 class="text-xl font-semibold mb-4"
                            x-text="assessmentQuestions[currentQuestionIndex].multipleChoice.question"></h3>
                        <div class="space-y-3">
                            <template
                                x-for="(option, key) in assessmentQuestions[currentQuestionIndex].multipleChoice.options"
                                :key="key">
                                <button @click="checkAnswer(key)"
                                    class="w-full text-left px-4 py-2 border border-gray-300 rounded-md hover:bg-indigo-100 transition duration-200"
                                    :class="{'bg-green-100': isCorrect === true && selectedAnswer === key, 'bg-red-100': isCorrect === false && selectedAnswer === key}">
                                    <span x-text="key.toUpperCase() + ': ' + option"></span>
                                </button>
                            </template>
                        </div>
                    </div>

                    <!-- Explanation -->
                    <div x-show="showExplanation" class="mt-4">
                        <!-- Feedback Message -->
                        <div class="mb-4">
                            <template x-if="isCorrect === true">
                                <p class="text-green-600 font-semibold">Correct! Great job!</p>
                            </template>
                            <template x-if="isCorrect === false">
                                <p class="text-red-600 font-semibold">Incorrect. Don't worry, keep learning!</p>
                            </template>
                            <template x-if="isCorrect === null">
                                <!-- This handles the case when the user didn't attempt the multiple-choice question -->
                                <p class="text-blue-600 font-semibold">Here's an explanation to help you understand:</p>
                            </template>
                        </div>

                        <h4 class="text-lg font-semibold mb-2">Explanation:</h4>
                        <p x-text="assessmentQuestions[currentQuestionIndex].explanation" class="text-gray-700"></p>
                        <div class="mt-4">
                            <h4 class="text-lg font-semibold mb-2">Code Example:</h4>
                            <div class="overflow-x-auto">
                                <pre><code class="language-python" x-text="assessmentQuestions[currentQuestionIndex].codeSnippet"></code></pre>
                            </div>
                        </div>
                        <button @click="nextQuestion"
                            class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition duration-200">Next
                            Question</button>
                    </div>
                </div>
            </template>
            <div x-show="currentQuestionIndex >= assessmentQuestions.length" class="text-center">
                <h3 class="text-2xl font-bold text-indigo-600 mb-4">Assessment Completed!</h3>
                <p class="text-gray-600 mb-6">Great job! You've completed all the assessment questions.</p>
                <a :href="'/question/' + encodeURIComponent(question)">
                    <button @click="resetAssessment" class="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-200">
                        Let's start with the question
                    </button>
                </a>
                
            </div>
        </div>
    </div>

    <div x-show="loading"
        class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center">
        <div class="bg-white p-5 rounded-lg shadow-lg text-center">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
            <p class="mt-4 text-gray-700">Preparing your session...</p>
        </div>
    </div>

    <script>
        // Add this function to your existing script
        function saveResponse(question, response) {
            fetch('/save-response', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ question, response }),
            })
            .then(response => response.json())
            .then(data => {
                if (!data.success) {
                    console.error('Failed to save response');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }
    
        document.addEventListener('alpine:init', () => {
            Alpine.data('assessmentApp', () => ({
                question: '',
                selectedLanguage: '',
                assessmentQuestions: [],
                currentQuestionIndex: 0,
                showConceptQuestion: true,
                showMultipleChoice: false,
                showExplanation: false,
                selectedAnswer: null,
                isCorrect: null,
                loading: false,
                showQuestions: false,
    
                startAssessment() {
                    this.loading = true;
                    fetch('/start-session', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            question: this.question,
                            language: this.selectedLanguage  // Send the selected language
                        }),
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            this.loading = false;
                            if (data.assessmentQuestions) {
                                this.assessmentQuestions = JSON.parse(data.assessmentQuestions);
                                this.showQuestions = true;
                                this.currentQuestionIndex = 0;
                                this.resetQuestionState();
                            } else if (data.error) {
                                console.error('Server error:', data.error);
                                alert(`An error occurred: ${data.error}`);
                            } else {
                                console.error('Unexpected response format:', data);
                                alert('An unexpected error occurred. Please try again.');
                            }
                        })
                        .catch(error => {
                            this.loading = false;
                            console.error('Error:', error);
                            alert(`An error occurred: ${error.message}`);
                        });
                },
    
                // Modified handleConceptAnswer function
                handleConceptAnswer(knows) {
                    const question = this.assessmentQuestions[this.currentQuestionIndex].conceptQuestion;
                    const response = knows ? 'Yes' : 'No';
                    saveResponse(question, response);
    
                    if (knows) {
                        this.showConceptQuestion = false;
                        this.showMultipleChoice = true;
                    } else {
                        this.showExplanation = true;
                        this.showConceptQuestion = false;
                        this.isCorrect = null;
                    }
                },
    
                // Modified checkAnswer function
                checkAnswer(selectedKey) {
                    this.selectedAnswer = selectedKey;
                    const question = this.assessmentQuestions[this.currentQuestionIndex].multipleChoice.question;
                    const response = selectedKey;
                    saveResponse(question, response);
    
                    const correctAnswer = this.assessmentQuestions[this.currentQuestionIndex].multipleChoice.correctAnswer;
                    this.isCorrect = selectedKey === correctAnswer;
                    this.showExplanation = true;
                    this.showMultipleChoice = false;
                },
    
                nextQuestion() {
                    this.currentQuestionIndex++;
                    if (this.currentQuestionIndex < this.assessmentQuestions.length) {
                        this.resetQuestionState();
                        // Re-highlight code blocks for new content
                        this.$nextTick(() => {
                            hljs.highlightAll();
                        });
                    }
                },

                resetAssessment() {
                    this.currentQuestionIndex = 0;
                    this.showQuestions = false;
                    this.resetQuestionState();
                },

                resetQuestionState() {
                    this.showConceptQuestion = true;
                    this.showMultipleChoice = false;
                    this.showExplanation = false;
                    this.selectedAnswer = null;
                    this.isCorrect = null;
                }
            }));
        });
    </script>
    
</body>

</html>