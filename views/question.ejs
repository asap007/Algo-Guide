<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= question.title %> - LeetCode Helper
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/dracula.min.css">
</head>

<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-6 text-center text-blue-600">
            <%= question.title %>
        </h1>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-semibold mb-4">Question Description</h2>
                <p class="text-gray-700">
                    <%= question.description %>
                </p>
            </div>
            <div class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-semibold mb-4">Code Editor</h2>
                <!-- Language selection dropdown -->
                <select id="languageSelect" class="w-full p-2 border border-gray-300 rounded-md mb-4">
                    <option value="java" selected>Java</option>
                    <option value="python">Python</option>
                    <option value="cpp">C++</option>
                    <option value="javascript">JavaScript</option>
                </select>
                <!-- Textarea that CodeMirror will replace -->
                <textarea id="codeEditor" class="w-full h-64 p-2 border border-gray-300 rounded-md hidden"></textarea>
                <div class="mt-4 flex justify-between">
                    <button id="executeBtn"
                        class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">Run Code</button>
                    <button id="analyzeBtn"
                        class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">Analyze</button>
                </div>
            </div>
        </div>

        <!-- Execution Output Box -->
        <div id="outputBox" class="mt-8 bg-white rounded-xl shadow-md p-6 hidden">
            <h2 class="text-xl font-semibold mb-4">Execution Output</h2>
            <pre id="outputContent" class="bg-gray-100 p-4 rounded-md overflow-x-auto"></pre>
        </div>

        <!-- AI Feedback Box -->
        <div id="aiResponse" class="mt-8 bg-white rounded-xl shadow-md p-6 hidden">
            <h2 class="text-xl font-semibold mb-4">AI Feedback</h2>
            <div id="aiFeedback" class="text-gray-700"></div>
        </div>
    </div>

    <!-- CodeMirror Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/xml/xml.min.js"></script>
    
    <script>
        // Boilerplate code for each language
        const boilerplates = {
            python: `def main():\n    # Your code here\n    pass\n\nif __name__ == "__main__":\n    main()\n`,
            
            java: `public class Main {\n    public static void main(String[] args) {\n        // Your code here\n    }\n}\n`,
            
            cpp: `#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}\n`,
            
            javascript: `function main() {\n    // Your code here\n}\n\nmain();\n`
        };
    
        // Initialize CodeMirror
        const codeEditorElement = document.getElementById('codeEditor');
        let codeMirrorEditor = CodeMirror.fromTextArea(codeEditorElement, {
            mode: 'python',  // Default mode (Python)
            theme: 'dracula', // Theme
            lineNumbers: true, // Enable line numbers
            tabSize: 2,
            indentWithTabs: true
        });
    
        // Set default boilerplate code
        codeMirrorEditor.setValue(boilerplates['java']);
    
        // Change language mode and populate boilerplate code based on selection
        document.getElementById('languageSelect').addEventListener('change', function () {
            const selectedLanguage = this.value;
            let mode;
            switch (selectedLanguage) {
                case 'python':
                    mode = 'python';
                    break;
                case 'java':
                    mode = 'text/x-java';
                    break;
                case 'cpp':
                    mode = 'text/x-c++src';
                    break;
                case 'javascript':
                    mode = 'javascript';
                    break;
            }
            codeMirrorEditor.setOption('mode', mode);
            codeMirrorEditor.setValue(boilerplates[selectedLanguage]); // Set boilerplate for the selected language
        });
    
        // Handle Run Code
        document.getElementById('executeBtn').addEventListener('click', async () => {
            const code = codeMirrorEditor.getValue();  // Get the value from CodeMirror
            const language = document.getElementById('languageSelect').value;  // Get the selected language
    
            try {
                const response = await fetch(`/question/<%= question.id %>/execute`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, language }),  // Pass code and language to backend
                });
                const data = await response.json();
                
                // Display execution output
                document.getElementById('outputBox').classList.remove('hidden');
                document.getElementById('outputContent').textContent = data.output || 'No output';
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('outputBox').classList.remove('hidden');
                document.getElementById('outputContent').textContent = 'Error executing code: ' + error.message;
            }
        });
    
        // Handle Analyze Code
        document.getElementById('analyzeBtn').addEventListener('click', async () => {
            const code = codeMirrorEditor.getValue();  // Get code from CodeMirror
            try {
                const response = await fetch(`/question/<%= question.id %>/analyze`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, questionId: '<%= question.id %>' }),  // Send code to backend for analysis
                });
                const data = await response.json();
                // Display AI feedback
                document.getElementById('aiResponse').classList.remove('hidden');
                document.getElementById('aiFeedback').innerHTML = data.analysis;
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('aiResponse').classList.remove('hidden');
                document.getElementById('aiFeedback').innerHTML = 'Error analyzing code: ' + error.message;
            }
        });
    </script>
    
</body>

</html>
