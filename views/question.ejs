<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        Algo Guide
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/dracula.min.css">
    <link rel="shortcut icon" href="/images/algoguidelogofinal.png" type="image/x-icon">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .editor-container {
            display: flex;
            gap: 2rem;
            justify-content: space-between;
        }

        .editor,
        .output-section {
            flex: 1;
            background: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
        }

        .editor h2,
        .output-section h2 {
            margin-bottom: 1rem;
            font-size: 2.5rem;
            color: #4f46e5;
            font-weight: 700;
        }

        .editor textarea,
        .output-section textarea {
            width: 100%;
            height: 100px;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 0.75rem;
            font-family: 'Courier New', Courier, monospace;
            margin-bottom: 1rem;
        }

        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
        }

        .btn-run {
            background: #10b981;
        }

        .btn-analyze {
            background: #3b82f6;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn-run:hover {
            background: #059669;
        }

        .btn-analyze:hover {
            background: #2563eb;
        }

        body {
            background-color: #f0f4f8;
            background-image:
                radial-gradient(#d1d5db 1px, transparent 1px),
                radial-gradient(#d1d5db 1px, transparent 1px);
            background-size: 20px 20px;
            background-position: 0 0, 10px 10px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-3xl font-extrabold text-center mb-10 text-indigo-600"><%= question.title %></h1>
        <h1 class="text-5xl font-extrabold text-center mb-8 text-indigo-600">
            <%= question.title %>
        </h1>
        <div class="editor-container">
            <div class="editor">
                <h2>Code Editor</h2>
                <select id="languageSelect"
                    class="w-full p-3 border border-gray-300 rounded-lg mb-4 bg-white shadow-sm">
                    <option value="java" selected>Java</option>
                    <option value="python">Python</option>
                    <option value="cpp">C++</option>
                    <option value="javascript">JavaScript</option>
                </select>
                <textarea id="codeEditor"></textarea>
            </div>
            <div class="output-section">
                <h2>Test Information</h2>
                <div class="mb-4">
                    <label class="block text-lg font-bold text-gray-700 mb-2">Input</label>
                    <textarea id="testInput" placeholder="Enter your test input here"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-bold text-gray-700 mb-2">Expected Output</label>
                    <textarea id="expectedOutput" placeholder="Enter the expected output"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-bold text-gray-700 mb-2">Your Output</label>
                    <textarea id="actualOutput" placeholder="Your code's output will appear here"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-lg font-bold text-gray-700 mb-2">Error Output</label>
                    <textarea id="errorInput"
                        placeholder="If your code produces any errors, they'll appear here"></textarea>
                </div>
                <button id="analyzeBtn" class="btn btn-analyze text-white">Analyze</button>
                <div id="aiResponse" class="mt-4 hidden">
                    <h2 class="text-2xl font-semibold mb-4">AI Feedback</h2>
                    <div id="aiFeedback" class="p-4 bg-gray-100 rounded-lg shadow-inner"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/xml/xml.min.js"></script>

    <script>
        const boilerplates = {
            python: `def main():\n    # Your code here\n    pass\n\nif __name__ == "__main__":\n    main()\n`,
            java: `public class Main {\n    public static void main(String[] args) {\n        // Your code here\n    }\n}\n`,
            cpp: `#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}\n`,
            javascript: `function main() {\n    // Your code here\n}\n\nmain();\n`
        };

        const codeMirrorEditor = CodeMirror.fromTextArea(document.getElementById('codeEditor'), {
            mode: 'text/x-java',
            theme: 'dracula',
            lineNumbers: true
        });

        codeMirrorEditor.setValue(boilerplates['java']);

        document.getElementById('languageSelect').addEventListener('change', function () {
            const selectedLanguage = this.value;
            let mode;
            switch (selectedLanguage) {
                case 'python':
                    mode = 'python';
                    break;
                case 'java':
                    mode = 'text/x-java';
                    break;
                case 'cpp':
                    mode = 'text/x-c++src';
                    break;
                case 'javascript':
                    mode = 'javascript';
                    break;
            }
            codeMirrorEditor.setOption('mode', mode);
            codeMirrorEditor.setValue(boilerplates[selectedLanguage]);
        });

        function formatAnalysis(analysisData) {
            // First, ensure we have valid data to work with
            const analysis = analysisData?.analysis || analysisData;

            if (!analysis || typeof analysis !== 'object') {
                return `<p class="text-red-500">Unable to process analysis data</p>
                        <pre class="mt-4 p-4 bg-gray-100 rounded overflow-auto">${JSON.stringify(analysisData, null, 2)}</pre>`;
            }

            // Helper function to safely render sections
            const renderSection = (title, content) => content ? `
                <div class="space-y-2">
                    <h4 class="font-medium">${title}</h4>
                    <div class="pl-4">
                        ${content}
                    </div>
                </div>
            ` : '';

            // Helper function to render lists
            const renderList = (items) => items && items.length ? `
                <ul class="list-disc pl-4">
                    ${items.map(item => `<li>${item}</li>`).join('')}
                </ul>
            ` : '';

            // Compose the HTML
            let html = '<div class="space-y-4">';

            // Greeting section
            if (analysis.greeting) {
                html += `
                <div class="border-b pb-2">
                    <h3 class="text-lg font-semibold text-indigo-600">${analysis.greeting.message || 'Analysis Results'}</h3>
                    ${analysis.greeting.empathy ? `<p class="text-gray-600">${analysis.greeting.empathy}</p>` : ''}
                </div>`;
            }

            // Code Analysis section
            const codeAnalysis = analysis.codeAnalysis;
            if (codeAnalysis) {
                html += renderSection('Code Analysis', `
                    ${codeAnalysis.correctParts ? `
                        <p><strong>Correct Parts:</strong></p>
                        ${renderList(codeAnalysis.correctParts)}` : ''}
                    
                    ${codeAnalysis.improvementAreas ? `
                        <p class="mt-2"><strong>Areas for Improvement:</strong></p>
                        ${renderList(codeAnalysis.improvementAreas)}` : ''}
                    
                    <p class="mt-2"><strong>Complexity Analysis:</strong></p>
                    <p>${codeAnalysis.complexityAnalysis || 'Not available'}</p>
                `);
            }

            // Test Case Analysis section
            const testAnalysis = analysis.testCaseAnalysis;
            if (testAnalysis) {
                html += renderSection('Test Case Analysis', `
                    <p><strong>Input Analysis:</strong> ${testAnalysis.inputAnalysis || 'Not available'}</p>
                    <p><strong>Output Comparison:</strong> ${testAnalysis.outputComparison || 'Not available'}</p>
                    ${testAnalysis.edgeCases ? `
                        <p><strong>Suggested Edge Cases:</strong></p>
                        ${renderList(testAnalysis.edgeCases)}` : ''}
                `);
            }

            // Next Steps section
            if (analysis.nextSteps) {
                html += renderSection('Next Steps', `
                    ${analysis.nextSteps.immediateActions ? `
                        <p><strong>Immediate Actions:</strong></p>
                        ${renderList(analysis.nextSteps.immediateActions)}` : ''}
                    
                    ${analysis.nextSteps.conceptsToReview ? `
                        <p class="mt-2"><strong>Concepts to Review:</strong></p>
                        ${renderList(analysis.nextSteps.conceptsToReview)}` : ''}
                `);
            }

            // Encouragement section
            if (analysis.encouragement) {
                html += `
                <div class="mt-4 bg-indigo-50 p-4 rounded-lg">
                    <p class="font-medium text-indigo-700">${analysis.encouragement.progressAcknowledgment || 'Keep up the good work!'}</p>
                    <p class="text-indigo-600 italic mt-2">${analysis.encouragement.motivationalMessage || "You're making progress!"}</p>
                </div>`;
            }

            html += '</div>';
            return html;
        }

        // Update the click event listener
        document.getElementById('analyzeBtn').addEventListener('click', async () => {
            const analyzeBtn = document.getElementById('analyzeBtn');
            const code = codeMirrorEditor.getValue();
            const error = document.getElementById('errorInput').value;
            const testInput = document.getElementById('testInput').value;
            const expectedOutput = document.getElementById('expectedOutput').value;
            const actualOutput = document.getElementById('actualOutput').value;

            const aiResponseElement = document.getElementById('aiResponse');
            const aiFeedbackElement = document.getElementById('aiFeedback');

            try {
                // Show processing state
                analyzeBtn.disabled = true;
                analyzeBtn.textContent = 'Processing...';

                // Fetch user context
                const userContextResponse = await fetch(`/user-context/<%= user._id %>`);
                const userContextData = await userContextResponse.json();

                if (!userContextData.success) {
                    throw new Error('Failed to fetch user context');
                }

                const response = await fetch(`/question/<%= question.id %>/analyze`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        code,
                        error,
                        testInput,
                        expectedOutput,
                        actualOutput,
                        questionId: '<%= question.id %>',
                        userContext: userContextData.responses
                    })
                });

                const data = await response.json();

                // Send the analysis data to the handle-output endpoint
                const handleOutputResponse = await fetch('/handle-output', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                if (handleOutputResponse.ok) {
                    // Redirect to the handle-output page
                    window.location.href = '/handle-output';
                } else {
                    throw new Error('Failed to send data to handle-output');
                }
            } catch (error) {
                aiResponseElement.classList.remove('hidden');
                aiFeedbackElement.innerHTML = `
                        <div class="text-red-500">
                            <p class="font-bold">Error analyzing code:</p>
                            <p>${error.message}</p>
                        </div>`;
            } finally {
                // Reset button state
                analyzeBtn.disabled = false;
                analyzeBtn.textContent = 'Analyze';
            }
        });



    </script>
</body>

</html>