<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Immersive Coding Quest</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            min-height: 100vh;
            overflow-y: auto;
        }

        @keyframes float {
            0% {
                transform: translateY(0px);
            }

            50% {
                transform: translateY(-20px);
            }

            100% {
                transform: translateY(0px);
            }
        }

        .floating {
            animation: float 6s ease-in-out infinite;
        }

        @keyframes twinkle {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .star {
            position: fixed;
            background-color: white;
            border-radius: 50%;
            animation: twinkle 2s infinite;
        }

        .meteor {
            position: fixed;
            background: linear-gradient(to bottom right, white, transparent);
            transform: rotate(45deg);
        }
    </style>
</head>

<body class="bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 text-white">
    <div id="stars"></div>
    <div id="meteors"></div>

    <div class="min-h-screen flex flex-col">
        <header class="bg-gradient-to-r from-blue-600 to-purple-600 p-6 text-white">
            <h1 class="text-5xl font-bold text-center mb-2 animate-pulse">Cosmic Code</h1>
            <p class="text-center text-xl">Embark on an intergalactic journey through the universe of coding!</p>
        </header>

        <main class="flex-grow p-6 overflow-y-auto" id="mainContent">
            <div
                class="container mx-auto bg-white/10 backdrop-blur-md rounded-xl shadow-2xl overflow-hidden max-w-4xl mb-8">
                <div class="flex flex-col md:flex-row items-start gap-8 p-6">
                    <div class="flex-1 space-y-6">
                        <div id="dialogue" class="bg-white/20 backdrop-blur p-6 rounded-lg relative">
                            <p id="dialogueText" class="text-lg font-medium">Welcome, cosmic coder! Are you ready to
                                begin your quest?</p>
                            <span class="absolute bottom-2 right-4 text-3xl animate-pulse">|</span>
                        </div>

                        <div id="questionContainer"
                            class="hidden bg-yellow-300/20 backdrop-blur p-6 rounded-lg border-2 border-yellow-400">
                            <h2 class="text-2xl font-bold mb-4 text-yellow-300">ðŸŒŸ Stellar Challenge!</h2>
                            <p id="questionText" class="text-lg font-semibold mb-4"></p>
                            <div id="options" class="space-y-3">
                                <!-- Options will be dynamically inserted here -->
                            </div>
                        </div>

                        <div id="feedbackContainer"
                            class="hidden bg-green-300/20 backdrop-blur p-6 rounded-lg border-2 border-green-400">
                            <p id="feedbackText" class="text-lg font-semibold"></p>
                        </div>

                        <div id="nextBtnContainer" class="hidden mt-6 pb-6">
                            <button id="nextBtn"
                                class="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-full text-lg font-bold hover:from-blue-600 hover:to-purple-700 transition duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                                Continue Cosmic Journey â†’
                            </button>
                        </div>
                    </div>

                    <div id="character" class="w-64 h-64 floating">
                        <img src="../images/gif2.gif" alt="Cosmic Coding Wizard"
                            class="w-full h-full object-contain filter drop-shadow-[0_0_8px_rgba(255,255,255,0.8)]">
                    </div>
                </div>
            </div>
        </main>

        <footer class="bg-white/10 backdrop-blur p-4 text-center">
            <p>Â© 2024 Cosmic Code Quest. Keep coding and explore the universe!</p>
        </footer>
    </div>

    <script>
        const character = document.getElementById('character');
        const dialogueText = document.getElementById('dialogueText');
        const questionContainer = document.getElementById('questionContainer');
        const questionText = document.getElementById('questionText');
        const options = document.getElementById('options');
        const feedbackContainer = document.getElementById('feedbackContainer');
        const feedbackText = document.getElementById('feedbackText');
        const nextBtn = document.getElementById('nextBtn');
        const nextBtnContainer = document.getElementById('nextBtnContainer');
        const mainContent = document.getElementById('mainContent');

        const questions = [
            {
                text: "In the cosmic language of code, what's the primary purpose of a 'for' loop?",
                options: [
                    "To launch a space function",
                    "To orbit a block of code a specific number of times",
                    "To declare interstellar variables",
                    "To import alien libraries"
                ],
                correctAnswer: 1
            },
            {
                text: "Which cosmic data structure uses the LIFO (Last In, First Out) principle?",
                options: [
                    "Quantum Queue",
                    "Nebula Array",
                    "Galactic Stack",
                    "Interstellar Linked List"
                ],
                correctAnswer: 2
            },
            // Add more space-themed questions here
        ];

        let currentQuestionIndex = 0;

        function typeText(text, element, speed = 50) {
            let i = 0;
            element.textContent = '';
            function type() {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                }
            }
            type();
        }

        function showQuestion(index) {
            const question = questions[index];
            typeText(question.text, questionText);
            options.innerHTML = '';
            question.options.forEach((option, i) => {
                const button = document.createElement('button');
                button.textContent = option;
                button.className = 'w-full text-left p-3 rounded-lg bg-white/10 hover:bg-white/20 transition duration-300 shadow-md hover:shadow-lg text-white font-medium transform hover:scale-105';
                button.onclick = () => checkAnswer(i);
                options.appendChild(button);
            });
            questionContainer.classList.remove('hidden');
        }

        function checkAnswer(selectedIndex) {
            const question = questions[currentQuestionIndex];
            if (selectedIndex === question.correctAnswer) {
                feedbackText.textContent = "Cosmic brilliance! Your code has unlocked new galaxies of knowledge!";
                feedbackText.className = 'text-lg font-semibold text-green-300';
                feedbackContainer.className = 'bg-green-500/20 backdrop-blur p-6 rounded-lg border-2 border-green-400';
            } else {
                feedbackText.textContent = "A temporary black hole in your logic. The correct answer was: " + question.options[question.correctAnswer];
                feedbackText.className = 'text-lg font-semibold text-red-300';
                feedbackContainer.className = 'bg-red-500/20 backdrop-blur p-6 rounded-lg border-2 border-red-400';
            }
            feedbackContainer.classList.remove('hidden');
            nextBtnContainer.classList.remove('hidden');
            scrollToBottom();
        }

        function scrollToBottom() {
            setTimeout(() => {
                mainContent.scrollTop = mainContent.scrollHeight;
            }, 100);
        }

        nextBtn.addEventListener('click', () => {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                feedbackContainer.classList.add('hidden');
                nextBtnContainer.classList.add('hidden');
                typeText("Prepare for your next cosmic challenge!", dialogueText);
                setTimeout(() => showQuestion(currentQuestionIndex), 2000);
            } else {
                typeText("Congratulations, cosmic coder! You've mastered the universe of programming!", dialogueText);
                questionContainer.classList.add('hidden');
                nextBtnContainer.classList.add('hidden');
            }
            scrollToBottom();
        });

        // Create stars and meteors (same as before)
        // ...
        // Create stars
        const starsContainer = document.getElementById('stars');
        for (let i = 0; i < 100; i++) {
            const star = document.createElement('div');
            star.className = 'star';
            star.style.width = `${Math.random() * 3}px`;
            star.style.height = star.style.width;
            star.style.left = `${Math.random() * 100}%`;
            star.style.top = `${Math.random() * 100}%`;
            star.style.animationDelay = `${Math.random() * 2}s`;
            starsContainer.appendChild(star);
        }

        // Create meteors
        const meteorsContainer = document.getElementById('meteors');
        for (let i = 0; i < 5; i++) {
            const meteor = document.createElement('div');
            meteor.className = 'meteor';
            meteor.style.width = `${Math.random() * 100 + 50}px`;
            meteor.style.height = '1px';
            meteor.style.left = `${Math.random() * 100}%`;
            meteor.style.top = `${Math.random() * 100}%`;
            meteorsContainer.appendChild(meteor);
        }
        // Start the interaction
        typeText("Greetings, cosmic coder! Are you ready to explore the vast universe of programming?", dialogueText);
        setTimeout(() => {
            typeText("Prepare for your first interstellar challenge!", dialogueText);
            setTimeout(() => showQuestion(currentQuestionIndex), 2000);
        }, 4000);
    </script>
</body>

</html>