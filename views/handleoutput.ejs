<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Algo Guide</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }
        .floating {
            animation: float 3s ease-in-out infinite;
        }
        @keyframes typing {
            from { width: 0 }
            to { width: 100% }
        }
        .typing-effect {
            overflow: hidden;
            border-right: .15em solid orange;
            white-space: normal;
            margin: 0 auto;
            letter-spacing: .05em;
            animation: 
                blink-caret .75s step-end infinite;
        }
        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: orange; }
        }
    </style>
</head>
<body class=" min-h-screen flex items-center justify-center p-4">
    <div class="container mx-auto p-4 sm:p-8 bg-white rounded-lg shadow-2xl max-w-4xl">
        <h1 class="text-2xl sm:text-4xl font-bold mb-6 text-center text-indigo-600">CodeQuest: Interactive Learning Platform</h1>
        
        <div class="flex flex-col sm:flex-row items-start mb-8 space-y-4 sm:space-y-0 sm:space-x-8">
            <div class="flex-1 w-full sm:w-auto">
                <div id="dialogue" class="bg-indigo-100 p-4 rounded-lg relative mb-4 h-48 overflow-y-auto">
                    <p id="dialogueText" class="text-base sm:text-lg typing-effect"></p>
                </div>
                
                <div id="interactionContainer" class="mb-6 hidden">
                    <p id="interactionText" class="text-base sm:text-lg font-semibold mb-2"></p>
                    <div id="interactionOptions" class="space-y-2"></div>
                </div>

                <div id="feedbackContainer" class="mb-6 hidden">
                    <p id="feedbackText" class="text-base sm:text-lg font-semibold"></p>
                </div>

                <button id="nextBtn" class="bg-indigo-500 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-full hover:bg-indigo-600 transition duration-300 hidden">
                    Next <i class="fas fa-arrow-right ml-2"></i>
                </button>
            </div>
            
            <div id="character" class="w-full sm:w-80 h-80 floating">
                <img src="../images/gif2.gif" alt="Coding Assistant" class="w-full h-full object-contain">
            </div>
        </div>

        <div id="progressBar" class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mt-4">
            <div id="progressFill" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
        </div>
    </div>

    <script>
        const dialogueText = document.getElementById('dialogueText');
        const interactionContainer = document.getElementById('interactionContainer');
        const interactionText = document.getElementById('interactionText');
        const interactionOptions = document.getElementById('interactionOptions');
        const feedbackContainer = document.getElementById('feedbackContainer');
        const feedbackText = document.getElementById('feedbackText');
        const nextBtn = document.getElementById('nextBtn');

        let analysisData;
        let currentStep = 0;
        const steps = [
            'greeting',
            'problem_introduction',
            'knowledge_assessment',
            'code_analysis',
            'visualization_offer',
            'reflection_moment',
            'next_steps',
            'encouragement'
        ];

        function typeText(text, element, speed = 50) {
            let i = 0;
            element.textContent = '';
            function type() {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                } else {
                    nextBtn.classList.remove('hidden');
                }
            }
            type();
        }

        function showInteraction(interactionData) {
            interactionText.textContent = interactionData.question;
            interactionOptions.innerHTML = '';
            interactionData.possible_user_responses.forEach((option) => {
                const button = document.createElement('button');
                button.textContent = option;
                button.className = 'w-full text-left p-2 rounded bg-gray-200 hover:bg-gray-300 transition duration-300';
                button.onclick = () => handleInteraction(option, interactionData.follow_ups);
                interactionOptions.appendChild(button);
            });
            interactionContainer.classList.remove('hidden');
        }

        function handleInteraction(selectedOption, followUps) {
            let feedback;
            let isCorrect;

            if (selectedOption === "Got it") {
                feedback = followUps.if_understood;
                isCorrect = true;
            } else if (selectedOption === "Not quite") {
                feedback = followUps.if_not_understood;
                isCorrect = false;
            } else {
                feedback = followUps.if_different_explanation_needed;
                isCorrect = false;
            }
            
            feedbackText.innerHTML = `
                <span class="${isCorrect ? 'text-green-500' : 'text-red-500'}">
                    <i class="fas fa-${isCorrect ? 'check-circle' : 'times-circle'} mr-2"></i>
                </span>
                ${feedback}
            `;
            feedbackContainer.classList.remove('hidden');
            nextBtn.classList.remove('hidden');
            interactionContainer.classList.add('hidden');
        }

        function updateProgressBar() {
            const progress = (currentStep / steps.length) * 100;
            document.getElementById('progressFill').style.width = `${progress}%`;
        }

        function showNextStep() {
            if (currentStep < steps.length) {
                const step = steps[currentStep];
                const stepData = analysisData.analysis[step];

                if (step === 'greeting') {
                    typeText(stepData.message + " " + stepData.empathy, dialogueText);
                } else if (step === 'knowledge_assessment') {
                    typeText(stepData.for_each_unknown_topic.introduction + " " + stepData.for_each_unknown_topic.explanation, dialogueText);
                    setTimeout(() => {
                        showInteraction(stepData.for_each_unknown_topic.interactive_element);
                    }, 2000);
                } else if (step === 'problem_introduction') {
                    typeText(stepData.summary + " " + stepData.real_world_connection, dialogueText);
                } else if (step === 'code_analysis') {
                    typeText(stepData.positive_feedback + " " + stepData.area_of_improvement, dialogueText);
                } else if (step === 'visualization_offer') {
                    typeText(stepData.question + " " + stepData.visualization.explanation, dialogueText);
                } else if (step === 'reflection_moment') {
                    typeText(stepData.question + " " + stepData.insight, dialogueText);
                } else if (step === 'next_steps') {
                    typeText(stepData.immediate_action + " " + stepData.learning_path, dialogueText);
                } else if (step === 'encouragement') {
                    typeText(stepData.progress_acknowledgment + " " + stepData.motivational_quote + " " + stepData.invitation_for_questions, dialogueText);
                }

                currentStep++;
                updateProgressBar();
            } else {
                typeText("Congratulations! You've completed this CodeQuest challenge. Ready for the next one?", dialogueText);
                nextBtn.textContent = "New Challenge";
                nextBtn.classList.remove('hidden');
                updateProgressBar();
            }
        }

        nextBtn.addEventListener('click', () => {
            feedbackContainer.classList.add('hidden');
            nextBtn.classList.add('hidden');
            showNextStep();
        });

        // Start the interaction
        fetch('/get-analysis-data')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                analysisData = data;
                showNextStep();
            })
            .catch(error => {
                console.error('Error fetching analysis data:', error);
                dialogueText.textContent = "Sorry, there was an error loading the analysis data: " + error.message;
            });
    </script>
</body>
</html>
